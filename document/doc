1：js做小数运算精度问题

	当js做小数运算时存在bug，大概是因为二进制和十进制转换之间的关系。

	解决方案

	1.加减法可以用参数乘以1000再用结果除以1000。

	2.乘除法可以用参数分别*100进行计算后在除以10000


2：git上传项目文件

	1：git add .
	2：git commit -m 'doc'
	3：git push -u origin hxb

	冲突：

	在使用Git的过程中，有些时候我们只想要 git 服务器中的最新版本的项目，对于本地的项目中修改不做任何理会，
	就需要用到 Git pull 的强制覆盖
	git fetch --all
    git reset --hard origin/master
    git pull

	保留本地最新修改，并拉取仓库中忘记 pull 的代码到本地 ：
	git stash
	git pull origin master
	git stash pop

	放弃本地代码，新修改的都不要了，退回上一版本，再拉取代码到本地。


	git reset --hard
	git pull origin master

3：js各种验证文本框输入格式(正则表达式)
	不能为空
	<input onblur="if(this.value.replace(/^ +| +$/g,'')=='')alert('不能为空!')">

	只能输入英文和数字
	<input onblur="if(/[^0-9a-zA-Z]/g.test(value))alert('有错')">
	<input onkeyup="value=value.replace(/[^0-9a-zA-Z]/g,'')"/>
	<input type="text" onkeyup="value=value.replace(/[^\a-\z\A-\Z0-9]/g,'')">

	判断字符由字母和数字，下划线,点号组成.且开头的只能是下划线和字母
	/^([a-zA-z_]{1})([\w]*)$/g.test(str)

	只能输入数字
	<input name="text" type="text" id="NewPage" onKeyUp="value=value.replace(/\D/g,'')" onafterpaste="value=value.replace(/\D/g,'')" >

	只能输入中文
	<input type="text" onkeyup="value=value.replace(/[^\u4E00-\u9FA5]/g,'')">

	只能输入英文
	<input type="text" onkeyup="value=value.replace(/[^\a-\z\A-\Z]/g,'')">
	<input type="text" onkeyup="value=value.replace(/[^a-zA-Z]/g,'')">

	只能输入中文、英文、数字、@符号和.符号
	<input type="text" onkeyup="value=value.replace(/[^\a-\z\A-\Z0-9\u4E00-\u9FA5\@\.]/g,'')">

	只允许输入英文，且不能粘贴也无法弹出粘贴菜单
	<input type="text" onkeyup="value=value.replace(/[^\a-\z\A-\Z]/g,'')" onkeydown="fncKeyStop(event)" onpaste="return false" oncontextmenu = "return false"/>

	只能输入数字和点号(注意:在[^\d\.]里的d不能写成大写D,否则就变成除了数字以外的所有字符)
	<input name="price" type="text" size="8" maxlength="8" onkeyup="value=value.replace(/[^\d\.]/g,'')" >


4：字符串的常用属性:

	* .length------>字符串的长度

	 * .charAt(索引),返回值是指定索引位置的字符串,超出索引,结果是空字符串

	 * .fromCharCode(数字值,可以是多个参数),返回的是ASCII码对应的值

	 * .concat(字符串1,字符串2,...);返回的是拼接之后的新的字符串

	 * .indexOf(要找的字符串,从某个位置开始的索引);返回的是这个字符串的索引值,没找到则返回-1

	 * .lastIndexOf(要找的字符串);从后向前找,但是索引仍然是从左向右的方式,找不到则返回-1

	 * .replace("原来的字符串","新的字符串");用来替换字符串的

	 * .slice(开始的索引,结束的索引); 从索引5的位置开始提取,到索引为10的前一个结束,没有10，并返回这个提取后的字符串

	 * .split("要干掉的字符串",切割后留下的个数);切割字符串

	 * .substr(开始的位置,个数);返回的是截取后的新的字符串

	 * .substring(开始的索引,结束的索引),返回截取后的字符串,不包含结束的索引的字符串

	 * .toLocaleLowerCase();转小写

	 * .toLowerCase();转小写

	 * .toLocaleUpperCase()转大写

	 * .toUpperCase();转大写

	 * .trim();干掉字符串两端的空格

5：总结Date对象的用法：

	var dt=new Date();

    var dt=+new Date();//一种特殊的写法,只适用于这个Date的对象

    console.log(dt);


    dt.getFullYear();//年

    dt.getMonth();//月---从0开始

    dt.getDate();//日

    dt.getHours();//小时

    dt.getMinutes();//分钟

    dt.getSeconds();//秒

    dt.getDay();//星期---从0开始

    dt.toDateString();//日期

    dt.toLocaleDateString();//日期

    dt.toTimeString();//时间

    dt.toLocaleTimeString();//时间

    dt.valueOf();//毫秒

 6：Array对象的方法;

	* Array.isArray(对象)---->判断这个对象是不是数组

     * instanceof关键字

     * .concat(数组,数组,数组,...) 组合一个新的数组

     * .every(函数)--返回值是布尔类型,函数作为参数使用,函数中有三个参数,第一个参数是元素的值，第二个参数是索引值,第三个参数是原来的数组(没用)

     * 如果这个数组中的每个元素的值都符合条件,最后才返回的是true

     *

     * .filter(函数);返回的是数组中每一个元素都复合条件的元素,组成了一个新的数组

     *

     * .push(值);--->把值追加到数组中,加到最后了---返回值也是追加数据之后的数组长度

     * .pop();--->删除数组中最后一个元素,返回值就是删除的这个值

     * .shift();--->删除数组中第一个元素,返回值就是删除的这个值

     * .unshift();--->向数组的第一个元素前面插入一个新的元素,----返回值是插入后的程度

     * .forEach(函数)方法---遍历数组用---相当于for循环

     * .indexOf(元素值);返回的是索引,没有则是-1

     * .join("字符串");----返回的是一个字符串

     * .map(函数);--->数组中的每个元素都要执行这个函数,把执行后的结果重新的全部的放在一个新的数组中

     * .reverse();----->反转数组

     * .sort();---排序的,可能不稳定,如果不稳定,请写MDN中的那个固定的代码

     * .arr.slice(开始的索引,结束的索引);把截取的数组的值放在一个新的数组中,但是不包含结束的索引对应的元素值

     * .splice(开始的位置,要删除的个数,替换的元素的值);一般是用于删除数组中的元素,或者是替换元素,或者是插入元素


	>Math.PI----π---

    >Math.E----常数的底数

    >Math.abs(值)-----绝对值

    >Math.ceil(值)----向上取整

    >Math.floor(值)---向下取整

7：https://www.jianshu.com/p/0b536e66ac61  基于umi的React项目结构介绍
